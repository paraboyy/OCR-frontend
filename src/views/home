<template>
  <div class="container">
    <h1>Deteksi Kode Batch Obat-2</h1>
    <input type="text" v-model="userInput" placeholder="Nama Pengirim (opsional)" class="input" />
    <div class="mode-group">
      <label><input type="radio" v-model="mode" value="barcode" /> Barcode</label>
      <label><input type="radio" v-model="mode" value="qr" /> QR Code</label>
      <label><input type="radio" v-model="mode" value="ocr" /> Teks (OCR)</label>
    </div>
    <div class="preview-area">
      <transition name="fade">
        <video v-show="isVideoActive" ref="video" autoplay playsinline class="video-preview"></video>
      </transition>
      <canvas ref="canvas" style="display: none"></canvas>
      <transition name="fade">
        <img v-show="!isVideoActive && imgPreviewUrl" :src="imgPreviewUrl" class="img-preview" alt="Preview" />
      </transition>
    </div>
    <div class="action-group">
      <button @click="captureFromCamera" class="main-btn"><span class="icon">&#128247;</span> Kamera</button>
      <label for="fileInput" class="upload-label"> <span class="icon">&#128206;</span> Upload Gambar </label>
      <input type="file" id="fileInput" accept="image/*" @change="onFileChange" style="display: none" />
      <button v-if="isVideoActive" @click="takePhotoFromVideo" class="main-btn green"><span class="icon">&#128247;</span> Ambil Foto</button>
    </div>
    <div class="info-text" v-if="infoText">{{ infoText }}</div>
    <div id="result" v-html="result" class="result"></div>
    <div id="ocrText" class="ocr-text">{{ ocrText }}</div>
  </div>
</template>

<script setup>
import { ref } from "vue";

const userInput = ref("");
const mode = ref("ocr");
const result = ref("");
const ocrText = ref("");
const infoText = ref("");

const video = ref(null);
const canvas = ref(null);
const imgPreview = ref(null);
const imgPreviewUrl = ref("");

const isVideoActive = ref(false);
const isMobile = ref(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));

let currentStream = null;

function getMode() {
  return mode.value;
}

function preprocessImageForOCR(img, canvasEl, callback) {
  if (!window.cv || !window.cv.imread) {
    setTimeout(() => preprocessImageForOCR(img, canvasEl, callback), 200);
    return;
  }
  let mat = window.cv.imread(img);

  // Resize gambar ke maxWidth 800px agar OCR cepat
  const maxWidth = 800;
  if (mat.cols > maxWidth) {
    const scale = maxWidth / mat.cols;
    let dsize = new window.cv.Size(Math.round(mat.cols * scale), Math.round(mat.rows * scale));
    window.cv.resize(mat, mat, dsize, 0, 0, window.cv.INTER_AREA);
  }

  // Preprocessing ringan: grayscale + threshold
  window.cv.cvtColor(mat, mat, window.cv.COLOR_RGBA2GRAY, 0);
  window.cv.threshold(mat, mat, 150, 255, window.cv.THRESH_BINARY);

  window.cv.imshow(canvasEl, mat);
  mat.delete();
  callback();
}

function captureFromCamera() {
  infoText.value = "";
  if (isMobile.value) {
    // HP: langsung ambil foto dari kamera belakang
    const constraints = {
      video: { facingMode: { ideal: "environment" } },
    };
    navigator.mediaDevices
      .getUserMedia(constraints)
      .then((stream) => {
        video.value.srcObject = stream;
        video.value.play();
        video.value.style.display = "block";
        isVideoActive.value = false;

        video.value.onloadedmetadata = () => {
          setTimeout(() => {
            canvas.value.width = video.value.videoWidth;
            canvas.value.height = video.value.videoHeight;
            const ctx = canvas.value.getContext("2d");
            ctx.drawImage(video.value, 0, 0, canvas.value.width, canvas.value.height);

            imgPreviewUrl.value = canvas.value.toDataURL("image/png");
            video.value.style.display = "none";
            result.value = "Memproses gambar...";
            ocrText.value = "";

            // Stop kamera setelah ambil gambar
            stream.getTracks().forEach((track) => track.stop());


            if (getMode() === "ocr") {
              preprocessImageForOCR(document.querySelector(".img-preview"), canvas.value, function () {
                window.Tesseract.recognize(canvas.value, "eng", {
                  logger: (m) => console.log(m),
                }).then(({ data: { text } }) => {
                  handleOCRResult(text);
                });
              });
            } else {
              const imageData = ctx.getImageData(0, 0, canvas.value.width, canvas.value.height);
              if (getMode() === "qr") {
                const qr = window.jsQR(imageData.data, imageData.width, imageData.height);
                if (qr && qr.data) {
                  tampilkanHasilBatch(qr.data, "QR Code");
                } else {
                  result.value = '<span class="error">QR Code tidak ditemukan.</span>';
                }
              } else if (getMode() === "barcode") {
                const dataUrl = canvas.value.toDataURL("image/png");
                detectBarcodeFromImageData(dataUrl, canvas.value.width, canvas.value.height, function (barcode) {
                  if (barcode) {
                    tampilkanHasilBatch(barcode, "Barcode");
                  } else {
                    result.value = '<span class="error">Barcode tidak ditemukan.</span>';
                  }
                });
              }
            }
          }, 400);
        };
      })
      .catch((err) => {
        result.value = '<span class="error">Gagal mengakses kamera: ' + err.message + "</span>";
      });
  } else {
    // Desktop/laptop: tampilkan video live, user bisa klik "Ambil Foto"
    const constraints = { video: true };
    navigator.mediaDevices
      .getUserMedia(constraints)
      .then((stream) => {
        currentStream = stream;
        video.value.srcObject = stream;
        video.value.play();
        video.value.style.display = "block";
        imgPreviewUrl.value = "";
        isVideoActive.value = true;
        infoText.value = "Arahkan kamera ke kode, lalu klik tombol 'Ambil Foto' di bawah.";
        result.value = "";
        ocrText.value = "";
      })
      .catch((err) => {
        result.value = '<span class="error">Gagal mengakses kamera: ' + err.message + "</span>";
      });
  }
}

// Untuk desktop/laptop: ambil foto dari video live
function takePhotoFromVideo() {
  if (!video.value) return;
  canvas.value.width = video.value.videoWidth;
  canvas.value.height = video.value.videoHeight;
  const ctx = canvas.value.getContext("2d");
  ctx.drawImage(video.value, 0, 0, canvas.value.width, canvas.value.height);

  imgPreviewUrl.value = canvas.value.toDataURL("image/png");
  video.value.style.display = "block";
  result.value = "Memproses gambar...";
  ocrText.value = "";

  // Stop kamera setelah ambil gambar
  if (currentStream) {
    currentStream.getTracks().forEach((track) => track.stop());
    currentStream = null;
  }
  isVideoActive.value = false;
  infoText.value = "";

  // Proses gambar sesuai mode
  if (getMode() === "ocr") {
    preprocessImageForOCR(document.querySelector(".img-preview"), canvas.value, function () {
      window.Tesseract.recognize(canvas.value, "eng", {
        logger: (m) => console.log(m),
      }).then(({ data: { text } }) => {
        handleOCRResult(text);
      });
    });
  } else {
    const imageData = ctx.getImageData(0, 0, canvas.value.width, canvas.value.height);
    if (getMode() === "qr") {
      const qr = window.jsQR(imageData.data, imageData.width, imageData.height);
      if (qr && qr.data) {
        tampilkanHasilBatch(qr.data, "QR Code");
      } else {
        result.value = '<span class="error">QR Code tidak ditemukan.</span>';
      }
    } else if (getMode() === "barcode") {
      const dataUrl = canvas.value.toDataURL("image/png");
      detectBarcodeFromImageData(dataUrl, canvas.value.width, canvas.value.height, function (barcode) {
        if (barcode) {
          tampilkanHasilBatch(barcode, "Barcode");
        } else {
          result.value = '<span class="error">Barcode tidak ditemukan.</span>';
        }
      });
    }
  }
}

function onFileChange(e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (ev) {
      imgPreviewUrl.value = ev.target.result;
      video.value.style.display = "none";
      result.value = "Memproses gambar...";
      ocrText.value = "";
      infoText.value = "";

      const img = new window.Image();
      img.onload = function () {
        canvas.value.width = img.width;
        canvas.value.height = img.height;
        const ctx = canvas.value.getContext("2d");
        ctx.drawImage(img, 0, 0, img.width, img.height);

        if (getMode() === "ocr") {
          preprocessImageForOCR(img, canvas.value, function () {
            window.Tesseract.recognize(canvas.value, "eng", {
              logger: (m) => console.log(m),
            }).then(({ data: { text } }) => {
              ocrText.value = "Hasil OCR:\n" + text;
              result.value = '<span class="success">OCR selesai.</span>';
              handleOCRResult(text);
            });
          });
        } else {
          const imageData = ctx.getImageData(0, 0, img.width, img.height);
          if (getMode() === "qr") {
            const qr = window.jsQR(imageData.data, imageData.width, imageData.height);
            if (qr && qr.data) {
              result.value = `<span class="success">QR Code: ${qr.data}</span>`;
            } else {
              result.value = '<span class="error">QR Code tidak ditemukan.</span>';
            }
          } else if (getMode() === "barcode") {
            const dataUrl = canvas.value.toDataURL("image/png");
            detectBarcodeFromImageData(dataUrl, canvas.value.width, canvas.value.height, function (barcode) {
              if (barcode) {
                result.value = `<span class="success">Barcode: ${barcode}</span>`;
              } else {
                result.value = '<span class="error">Barcode tidak ditemukan.</span>';
              }
            });
          }
        }
      };
      img.src = ev.target.result;
    };
    reader.readAsDataURL(file);
  }
}

function handleOCRResult(text) {
  ocrText.value = "Hasil OCR:\n" + text;
  const lines = text
    .split("\n")
    .map((line) => line.trim())
    .filter((line) => line.length > 0);
  let codeFound = false;

  const regexSameLine = /(batch\s*(no|number)?[\s\.:;\-]*)+([A-Za-z0-9\-]{3,})/i;
  const regexBatchOnly = /(batch\s*(no|number)?[\s\.:;\-]*)$/i;
  const regexCodeOnly = /^([A-Za-z0-9\-]{3,})$/;

  for (let i = 0; i < lines.length; i++) {
    let match = lines[i].match(regexSameLine);
    if (match && match[3]) {
      const code = match[3].trim();
      tampilkanHasilBatch(code, "OCR");
      codeFound = true;
      break;
    }
    if (regexBatchOnly.test(lines[i]) && i + 1 < lines.length) {
      let nextLine = lines[i + 1].trim();
      let codeMatch = nextLine.match(regexCodeOnly);
      if (codeMatch && codeMatch[1]) {
        const code = codeMatch[1].trim();
        tampilkanHasilBatch(code, "OCR");
        codeFound = true;
        break;
      }
    }
  }
  if (!codeFound) {
    result.value = '<span class="error">Kode tidak ditemukan. Coba lagi.</span>';
  }
}

function tampilkanHasilBatch(code, sumber) {
  result.value = `<span class="success">Kode terdeteksi (${sumber}): ${code}</span>`;
  fetch("http://127.0.0.1:3000/save-code", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ code: code, user: userInput.value }),
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.message) {
        result.value += '<br><span class="success">' + data.message + "</span>";
      }
    })
    .catch((error) => {
      console.error("Error:", error);
      result.value += '<br><span class="error">Gagal mengirim kode ke server.</span>';
    });
}

// Fungsi deteksi barcode 1D (QuaggaJS)
function detectBarcodeFromImageData(imageData, width, height, callback) {
  // Resize imageData jika terlalu besar
  // (Quagga lebih optimal di lebar 400-800px)
  let tempImg = new window.Image();
  tempImg.onload = function () {
    let tempCanvas = document.createElement("canvas");
    let scale = 1;
    if (tempImg.width > 800) scale = 800 / tempImg.width;
    tempCanvas.width = tempImg.width * scale;
    tempCanvas.height = tempImg.height * scale;
    let ctx = tempCanvas.getContext("2d");
    ctx.drawImage(tempImg, 0, 0, tempCanvas.width, tempCanvas.height);

    window.Quagga.decodeSingle(
      {
        src: tempCanvas.toDataURL("image/png"),
        inputStream: {
          size: tempCanvas.width,
          singleChannel: false,
        },
        locator: { patchSize: "medium", halfSample: false },
        decoder: {
          readers: ["code_128_reader", "ean_reader", "ean_8_reader", "code_39_reader", "upc_reader", "upc_e_reader"],
        },
        locate: true,
        numOfWorkers: 0,
      },
      function (result) {
        if (result && result.codeResult && result.codeResult.code) {
          callback(result.codeResult.code);
        } else {
          callback(null);
        }
      }
    );
  };
  tempImg.src = imageData;
}
</script>

<style scoped>
body {
  font-family: "Segoe UI", Arial, sans-serif;
  background: linear-gradient(135deg, #e0e7ff 0%, #f7f7f7 100%);
  margin: 0;
  padding: 0;
}
.container {
  background: #fff;
  margin: 40px auto;
  padding: 32px 24px 40px 24px;
  border-radius: 18px;
  box-shadow: 0 8px 32px rgba(44, 62, 80, 0.12);
  max-width: 480px;
}
h1 {
  color: #2563eb;
  margin-bottom: 18px;
  letter-spacing: 1px;
  text-align: center;
}
.input {
  padding: 10px;
  border-radius: 8px;
  border: 1px solid #b6c3d1;
  font-size: 16px;
  margin-bottom: 12px;
  width: 100%;
  box-sizing: border-box;
}
.mode-group {
  margin-bottom: 12px;
  display: flex;
  gap: 18px;
  align-items: center;
  justify-content: center;
}
.mode-group label {
  font-size: 15px;
  color: #2563eb;
  font-weight: 600;
  cursor: pointer;
}
.preview-area {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 10px;
  min-height: 220px;
}
.video-preview {
  width: 100%;
  max-width: 400px;
  aspect-ratio: 4/3;
  border-radius: 12px;
  border: 2px solid #60a5fa;
  background: #f3f4f6;
  box-shadow: 0 2px 8px rgba(44, 62, 80, 0.06);
  margin-bottom: 10px;
  transition: box-shadow 0.2s;
}
.img-preview {
  display: block;
  margin: 0 auto 12px auto;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(44, 62, 80, 0.06);
  max-width: 100%;
  height: auto;
  object-fit: contain;
  background: #f3f4f6;
  border: 2px solid #60a5fa;
  transition: box-shadow 0.2s;
}
.action-group {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
  flex-wrap: wrap;
  justify-content: center;
}
.main-btn,
.upload-label {
  background: linear-gradient(90deg, #2563eb 60%, #60a5fa 100%);
  color: #fff;
  border: none;
  padding: 14px 28px;
  border-radius: 10px;
  font-size: 18px;
  font-weight: 600;
  cursor: pointer;
  margin: 8px 0 0 0;
  transition: background 0.2s, box-shadow 0.2s;
  display: inline-flex;
  align-items: center;
  gap: 10px;
  box-shadow: 0 2px 8px rgba(44, 62, 80, 0.08);
}
.main-btn.green {
  background: linear-gradient(90deg, #22c55e 60%, #4ade80 100%);
}
.main-btn:active,
.upload-label:active {
  background: linear-gradient(90deg, #1e40af 60%, #2563eb 100%);
}
.upload-label {
  cursor: pointer;
}
#fileInput {
  display: none;
}
.result {
  margin-top: 18px;
  font-size: 18px;
  color: #222;
  min-height: 32px;
  word-break: break-word;
  text-align: center;
}
.ocr-text {
  margin-top: 10px;
  font-size: 14px;
  color: #555;
  background: #f3f4f6;
  border-radius: 8px;
  padding: 10px;
  word-break: break-all;
}
.success {
  color: #2563eb;
  font-weight: 600;
}
.error {
  color: #e11d48;
  font-weight: 600;
}
.icon {
  font-size: 20px;
  vertical-align: middle;
}
.info-text {
  text-align: center;
  color: #64748b;
  font-size: 15px;
  margin: 8px 0 0 0;
  font-style: italic;
}
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s;
}
.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
@media (max-width: 600px) {
  .container {
    padding: 12px 2vw;
  }
  h1 {
    font-size: 22px;
  }
  .action-group {
    flex-direction: column;
    gap: 8px;
  }
  .video-preview,
  .img-preview {
    max-width: 100vw;
  }
}
</style>
